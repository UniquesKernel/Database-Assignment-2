// <auto-generated />
using System;
using Assignment2.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment2.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220510112851_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Assignment2.Models.DateTimeCostume", b =>
                {
                    b.Property<DateTime>("CosDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Room_LocationAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Room_LocationRoomNr")
                        .HasColumnType("int");

                    b.HasKey("CosDateTime");

                    b.HasIndex("Room_LocationRoomNr", "Room_LocationAddress");

                    b.ToTable("DateTimeCostume");
                });

            modelBuilder.Entity("Assignment2.Models.Municipality", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Municipalities");
                });

            modelBuilder.Entity("Assignment2.Models.Person", b =>
                {
                    b.Property<long>("CPR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CPR"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CPR");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Assignment2.Models.Property_Type", b =>
                {
                    b.Property<string>("Item")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Room_LocationAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Room_LocationRoomNr")
                        .HasColumnType("int");

                    b.HasKey("Item");

                    b.HasIndex("Room_LocationRoomNr", "Room_LocationAddress");

                    b.ToTable("Property_Types");
                });

            modelBuilder.Entity("Assignment2.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BookedRoomsAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BookedRoomsRoomNr")
                        .HasColumnType("int");

                    b.Property<long>("BookingMembersCPR")
                        .HasColumnType("bigint");

                    b.Property<int>("BookingSocietyCVR")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookingMembersCPR");

                    b.HasIndex("BookingSocietyCVR");

                    b.HasIndex("BookedRoomsRoomNr", "BookedRoomsAddress");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Assignment2.Models.Room_Location", b =>
                {
                    b.Property<int>("RoomNr")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MaxOccupants")
                        .HasColumnType("int");

                    b.Property<string>("MunicipalityName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoomNr", "Address");

                    b.HasIndex("MunicipalityName");

                    b.ToTable("Room_Locations");
                });

            modelBuilder.Entity("Assignment2.Models.Society", b =>
                {
                    b.Property<int>("CVR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CVR"), 1L, 1);

                    b.Property<string>("Activity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ChairmanCPR")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CVR");

                    b.HasIndex("ChairmanCPR");

                    b.ToTable("Societies");
                });

            modelBuilder.Entity("PersonSociety", b =>
                {
                    b.Property<long>("MembersCPR")
                        .HasColumnType("bigint");

                    b.Property<int>("SocietyCVR")
                        .HasColumnType("int");

                    b.HasKey("MembersCPR", "SocietyCVR");

                    b.HasIndex("SocietyCVR");

                    b.ToTable("PersonSociety");
                });

            modelBuilder.Entity("Assignment2.Models.DateTimeCostume", b =>
                {
                    b.HasOne("Assignment2.Models.Room_Location", null)
                        .WithMany("AvailableTime")
                        .HasForeignKey("Room_LocationRoomNr", "Room_LocationAddress");
                });

            modelBuilder.Entity("Assignment2.Models.Property_Type", b =>
                {
                    b.HasOne("Assignment2.Models.Room_Location", null)
                        .WithMany("Items")
                        .HasForeignKey("Room_LocationRoomNr", "Room_LocationAddress");
                });

            modelBuilder.Entity("Assignment2.Models.Reservation", b =>
                {
                    b.HasOne("Assignment2.Models.Person", "BookingMembers")
                        .WithMany("Reservations")
                        .HasForeignKey("BookingMembersCPR")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Assignment2.Models.Society", "BookingSociety")
                        .WithMany()
                        .HasForeignKey("BookingSocietyCVR")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment2.Models.Room_Location", "BookedRooms")
                        .WithMany("Reservations")
                        .HasForeignKey("BookedRoomsRoomNr", "BookedRoomsAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookedRooms");

                    b.Navigation("BookingMembers");

                    b.Navigation("BookingSociety");
                });

            modelBuilder.Entity("Assignment2.Models.Room_Location", b =>
                {
                    b.HasOne("Assignment2.Models.Municipality", null)
                        .WithMany("Room_Locations")
                        .HasForeignKey("MunicipalityName");
                });

            modelBuilder.Entity("Assignment2.Models.Society", b =>
                {
                    b.HasOne("Assignment2.Models.Person", "Chairman")
                        .WithMany("Chairs")
                        .HasForeignKey("ChairmanCPR")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Chairman");
                });

            modelBuilder.Entity("PersonSociety", b =>
                {
                    b.HasOne("Assignment2.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("MembersCPR")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment2.Models.Society", null)
                        .WithMany()
                        .HasForeignKey("SocietyCVR")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Assignment2.Models.Municipality", b =>
                {
                    b.Navigation("Room_Locations");
                });

            modelBuilder.Entity("Assignment2.Models.Person", b =>
                {
                    b.Navigation("Chairs");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Assignment2.Models.Room_Location", b =>
                {
                    b.Navigation("AvailableTime");

                    b.Navigation("Items");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
